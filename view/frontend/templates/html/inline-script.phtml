<style>
/* Hide only the raw template text, not the actual message containers */
.page.messages > *:not(.message-success):not(.message-error):not(.message-notice):not(.message-warning):empty,
.messages > *:not(.message-success):not(.message-error):not(.message-notice):not(.message-warning):empty {
	display: none !important;
}
</style>

<script type="text/javascript">
// Inline script to clean up template text but preserve messages
(function() {
	// Function to selectively clean text nodes
	function cleanTemplateText() {
		var walkDOM = function(node) {
			// Only process if we have a node
			if (!node) return;
			
			// If it's a text node
			if (node.nodeType === 3) {
				var text = node.nodeValue;
				if (text && text.indexOf('Magento_Theme/js/view/message') !== -1) {
					node.nodeValue = '';
				}
			} 
			// If it's an element node
			else if (node.nodeType === 1) {
				// Skip if it's a real message
				if (node.classList && (
					node.classList.contains('message-success') || 
					node.classList.contains('message-error') || 
					node.classList.contains('message-notice') || 
					node.classList.contains('message-warning')
				)) {
					return;
				}
				
				// Skip script and style tags
				if (node.nodeName !== 'SCRIPT' && node.nodeName !== 'STYLE') {
					// Recurse for children
					for (var i = 0; i < node.childNodes.length; i++) {
						walkDOM(node.childNodes[i]);
					}
				}
			}
		};
		
		// Start walking from message containers only
		var messageContainers = document.querySelectorAll('.page.messages, .messages');
		for (var i = 0; i < messageContainers.length; i++) {
			walkDOM(messageContainers[i]);
		}
		
		// Also ensure any actual messages are visible
		var messages = document.querySelectorAll('.message-success, .message-error, .message-notice, .message-warning');
		for (var j = 0; j < messages.length; j++) {
			if (messages[j]) {
				messages[j].style.display = 'block';
				messages[j].style.visibility = 'visible';
				messages[j].style.opacity = '1';
				
				// Make sure message container is also visible
				var parent = messages[j].parentNode;
				if (parent && (parent.classList.contains('page.messages') || parent.classList.contains('messages'))) {
					parent.style.display = 'block';
					parent.style.visibility = 'visible';
					parent.style.opacity = '1';
				}
			}
		}
	}
	
	// Run when DOM is ready
	document.addEventListener('DOMContentLoaded', function() {
		cleanTemplateText();
	});
	
	// Run periodically to catch any dynamic updates
	setInterval(cleanTemplateText, 500);
})();

// Add direct event handlers for add to cart functionality
(function() {
	// Wait for document to be ready
	if (document.readyState === 'loading') {
		document.addEventListener('DOMContentLoaded', initCartHandlers);
	} else {
		initCartHandlers();
	}
	
	function initCartHandlers() {
		console.log('[CD-Inline] Setting up direct add-to-cart handlers');
		
		// Direct event handler for add to cart buttons
		document.addEventListener('click', function(e) {
			// Look for any element matching add to cart buttons
			var button = e.target.closest('button.action.tocart');
			if (button) {
				console.log('[CD-Inline] Add to cart button clicked via direct handler');
				
				// Set a timeout to open the cart after Magento processing completes
				setTimeout(function() {
					openMiniCart();
				}, 1000);
			}
		});
		
		// Function to forcibly open the minicart
		window.openMiniCart = function() {
			console.log('[CD-Inline] Opening minicart via direct method');
			
			var minicart = document.getElementById('cd-minicart');
			var overlay = document.getElementById('cd-overlay');
			
			if (minicart) {
				minicart.classList.add('active');
				
				// Also show overlay
				if (overlay) {
					overlay.style.display = 'block';
				}
				
				// Apply blur
				document.querySelectorAll('.page-main, .page-footer, .nav-sections, .breadcrumbs').forEach(function(el) {
					if (el) el.style.filter = 'blur(4px)';
				});
				
				// Lock scrolling
				var scrollPosition = window.pageYOffset || document.documentElement.scrollTop;
				window.lastScrollPosition = scrollPosition;
				document.documentElement.classList.add('scroll-locked');
				document.body.classList.add('scroll-locked');
				document.body.style.top = '-' + scrollPosition + 'px';
			}
		};
		
		// Add XHR override to detect add to cart AJAX requests
		var originalXHROpen = XMLHttpRequest.prototype.open;
		XMLHttpRequest.prototype.open = function() {
			var url = arguments[1];
			
			// Check if this is an add to cart request
			if (typeof url === 'string' && url.indexOf('checkout/cart/add') > -1) {
				console.log('[CD-Inline] Detected add to cart XHR: ' + url);
				
				// Set up load handler to check for success
				this.addEventListener('load', function() {
					if (this.status >= 200 && this.status < 300) {
						console.log('[CD-Inline] Add to cart XHR completed successfully');
						setTimeout(function() {
							openMiniCart();
						}, 500);
					}
				});
			}
			
			return originalXHROpen.apply(this, arguments);
		};
	}
})();
</script>